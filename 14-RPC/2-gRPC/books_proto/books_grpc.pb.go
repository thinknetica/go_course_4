// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc3
// source: books_proto/books.proto

package books_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookinistClient is the client API for Bookinist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookinistClient interface {
	Books(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bookinist_BooksClient, error)
	AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
}

type bookinistClient struct {
	cc grpc.ClientConnInterface
}

func NewBookinistClient(cc grpc.ClientConnInterface) BookinistClient {
	return &bookinistClient{cc}
}

func (c *bookinistClient) Books(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bookinist_BooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bookinist_ServiceDesc.Streams[0], "/protobuf.Bookinist/Books", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookinistBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bookinist_BooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookinistBooksClient struct {
	grpc.ClientStream
}

func (x *bookinistBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookinistClient) AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Bookinist/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookinistServer is the server API for Bookinist service.
// All implementations must embed UnimplementedBookinistServer
// for forward compatibility
type BookinistServer interface {
	Books(*Empty, Bookinist_BooksServer) error
	AddBook(context.Context, *Book) (*Empty, error)
	mustEmbedUnimplementedBookinistServer()
}

// UnimplementedBookinistServer must be embedded to have forward compatible implementations.
type UnimplementedBookinistServer struct {
}

func (UnimplementedBookinistServer) Books(*Empty, Bookinist_BooksServer) error {
	return status.Errorf(codes.Unimplemented, "method Books not implemented")
}
func (UnimplementedBookinistServer) AddBook(context.Context, *Book) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookinistServer) mustEmbedUnimplementedBookinistServer() {}

// UnsafeBookinistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookinistServer will
// result in compilation errors.
type UnsafeBookinistServer interface {
	mustEmbedUnimplementedBookinistServer()
}

func RegisterBookinistServer(s grpc.ServiceRegistrar, srv BookinistServer) {
	s.RegisterService(&Bookinist_ServiceDesc, srv)
}

func _Bookinist_Books_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookinistServer).Books(m, &bookinistBooksServer{stream})
}

type Bookinist_BooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type bookinistBooksServer struct {
	grpc.ServerStream
}

func (x *bookinistBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _Bookinist_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookinistServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Bookinist/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookinistServer).AddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookinist_ServiceDesc is the grpc.ServiceDesc for Bookinist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookinist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Bookinist",
	HandlerType: (*BookinistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _Bookinist_AddBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Books",
			Handler:       _Bookinist_Books_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "books_proto/books.proto",
}
